1. znajduje nowe notatki *.md w folderze tech_notes/ lub plan_notes/,
2. parsuje nazwę pliku albo zawartość (np. task-123-title.md albo epic-42-title.md),
3. używa *API Lineara*, żeby dodać komentarz z linkiem do notatki pod odpowiednim taskiem lub epikiem.

Poniżej pełna instrukcja jak to zrobić w *Pythonie*.

---

### Krok 1: Załóż token API Lineara

1. Wejdź na [https://linear.app](https://linear.app)
2. Kliknij w swój avatar > *Settings* > *API*
3. Wygeneruj token API i zachowaj go (np. zapisz w .env albo zmiennej środowiskowej)

---

### Krok 2: Struktura plików

Przykład:

project-root/
├── tech_notes/
│   ├── task-123-wersja-funkcji.md
│   ├── task-127-ui-stylowanie.md
├── plan_notes/
│   ├── epic-34-wersja-podstawowa.md
├── sync_notes.py
├── .env

---

### Krok 3: Skrypt sync_notes.py

import os
import requests
from dotenv import load_dotenv

load_dotenv()

LINEAR_API_KEY = os.getenv("LINEAR_API_KEY")
HEADERS = {
    "Authorization": f"Bearer {LINEAR_API_KEY}",
    "Content-Type": "application/json"
}
API_URL = "https://api.linear.app/graphql"

def get_note_links(folder, prefix):
    notes = []
    for fname in os.listdir(folder):
        if fname.startswith(prefix) and fname.endswith(".md"):
            parts = fname.split("-")
            if len(parts) >= 2:
                entity_id = parts[1]
                full_path = os.path.abspath(os.path.join(folder, fname))
                notes.append((entity_id, full_path))
    return notes

def comment_on_entity(entity_type, entity_id, note_path):
    note_url = f"file://{note_path}"  # Można też wrzucać do Gita i używać linków z GitHuba
    body = {
        "query": f'''
        mutation {{
            commentCreate(input: {{
                {entity_type}Id: "{entity_id}",
                body: "Notatka dołączona automatycznie: [{os.path.basename(note_path)}]({note_url})"
            }}) {{
                success
            }}
        }}
        '''
    }
    res = requests.post(API_URL, headers=HEADERS, json=body)
    if res.status_code == 200:
        print(f"Dodano komentarz do {entity_type} {entity_id}")
    else:
        print(f"Błąd dla {entity_type} {entity_id}: {res.text}")

def main():
    tech_notes = get_note_links("tech_notes", "task")
    for task_id, path in tech_notes:
        comment_on_entity("issue", task_id, path)

    plan_notes = get_note_links("plan_notes", "epic")
    for epic_id, path in plan_notes:
        comment_on_entity("project", epic_id, path)

if __name__ == "__main__":
    main()

---

### Krok 4: Plik .env

LINEAR_API_KEY=twój_token_api_z_lineara

---

### Krok 5: Uruchomienie

1. Zainstaluj biblioteki: pip install python-dotenv requests
2. Uruchom skrypt: python sync_notes.py

---

### Uwaga o linkach

Jeśli chcesz mieć działające linki (np. do GitHuba), to:

* zapisuj pliki .md w repozytorium
* użyj linku typu: https://github.com/użytkownik/repo/blob/main/tech_notes/task-123-opis.md
* wtedy zamiast file:// wstawiasz ten URL w note_url

Automatyzacja
– Na Windowsie używasz Harmonogramu zadań
– Skrypt może działać automatycznie np. co godzinę lub codziennie o 18:00